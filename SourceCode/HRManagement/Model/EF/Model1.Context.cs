//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class HRManagementEntities : DbContext
    {
        public HRManagementEntities()
            : base("name=HRManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AcademicLevel> AcademicLevels { get; set; }
        public DbSet<Account> Accounts { get; set; }
        public DbSet<Contract> Contracts { get; set; }
        public DbSet<ContractType> ContractTypes { get; set; }
        public DbSet<Course> Courses { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<Insurance> Insurances { get; set; }
        public DbSet<InsuranceType> InsuranceTypes { get; set; }
        public DbSet<LeaveAbsence> LeaveAbsences { get; set; }
        public DbSet<Nation> Nations { get; set; }
        public DbSet<Position> Positions { get; set; }
        public DbSet<ReportSalaryDaily> ReportSalaryDailies { get; set; }
        public DbSet<Salary> Salaries { get; set; }
        public DbSet<Specialize> Specializes { get; set; }
        public DbSet<Staff> Staffs { get; set; }
        public DbSet<StaffCourse> StaffCourses { get; set; }
        public DbSet<StaffInsurance> StaffInsurances { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<Timekeeping> Timekeepings { get; set; }
        public DbSet<AllInfoAccount> AllInfoAccounts { get; set; }
        public DbSet<AllInfoContract> AllInfoContracts { get; set; }
        public DbSet<AllInfoInsurance> AllInfoInsurances { get; set; }
        public DbSet<AllInfoSalary> AllInfoSalaries { get; set; }
        public DbSet<AllInfoStaffCourse> AllInfoStaffCourses { get; set; }
        public DbSet<AllInfoStaffInsurance> AllInfoStaffInsurances { get; set; }
    
        public virtual int BackUpDatabase(string path)
        {
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BackUpDatabase", pathParameter);
        }
    
        public virtual ObjectResult<EarningsReport_Result> EarningsReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EarningsReport_Result>("EarningsReport");
        }
    
        public virtual ObjectResult<GetAllInfoByIDStaff_Result> GetAllInfoByIDStaff(string iDStaff)
        {
            var iDStaffParameter = iDStaff != null ?
                new ObjectParameter("IDStaff", iDStaff) :
                new ObjectParameter("IDStaff", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInfoByIDStaff_Result>("GetAllInfoByIDStaff", iDStaffParameter);
        }
    
        public virtual ObjectResult<GetAllInfoContract_Result> GetAllInfoContract(string iDStaff)
        {
            var iDStaffParameter = iDStaff != null ?
                new ObjectParameter("IDStaff", iDStaff) :
                new ObjectParameter("IDStaff", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInfoContract_Result>("GetAllInfoContract", iDStaffParameter);
        }
    
        public virtual ObjectResult<GetTimekeepingByMonth_Result> GetTimekeepingByMonth(string iDDepartment, Nullable<int> month)
        {
            var iDDepartmentParameter = iDDepartment != null ?
                new ObjectParameter("IDDepartment", iDDepartment) :
                new ObjectParameter("IDDepartment", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTimekeepingByMonth_Result>("GetTimekeepingByMonth", iDDepartmentParameter, monthParameter);
        }
    
        public virtual ObjectResult<GetTimeSheetsByMonth_Result> GetTimeSheetsByMonth(string iDDepartment, Nullable<int> month)
        {
            var iDDepartmentParameter = iDDepartment != null ?
                new ObjectParameter("IDDepartment", iDDepartment) :
                new ObjectParameter("IDDepartment", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTimeSheetsByMonth_Result>("GetTimeSheetsByMonth", iDDepartmentParameter, monthParameter);
        }
    
        public virtual ObjectResult<GetTimeSheetsByMonthAndIDStaff_Result> GetTimeSheetsByMonthAndIDStaff(string iDDepartment, Nullable<int> month, string iDStaff)
        {
            var iDDepartmentParameter = iDDepartment != null ?
                new ObjectParameter("IDDepartment", iDDepartment) :
                new ObjectParameter("IDDepartment", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var iDStaffParameter = iDStaff != null ?
                new ObjectParameter("IDStaff", iDStaff) :
                new ObjectParameter("IDStaff", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTimeSheetsByMonthAndIDStaff_Result>("GetTimeSheetsByMonthAndIDStaff", iDDepartmentParameter, monthParameter, iDStaffParameter);
        }
    
        public virtual ObjectResult<IsExistCheckTime_Result> IsExistCheckTime(string iDStaff, Nullable<System.DateTime> date)
        {
            var iDStaffParameter = iDStaff != null ?
                new ObjectParameter("IDStaff", iDStaff) :
                new ObjectParameter("IDStaff", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IsExistCheckTime_Result>("IsExistCheckTime", iDStaffParameter, dateParameter);
        }
    
        public virtual int RemoveAllInfoStaff(string iDStaff)
        {
            var iDStaffParameter = iDStaff != null ?
                new ObjectParameter("IDStaff", iDStaff) :
                new ObjectParameter("IDStaff", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveAllInfoStaff", iDStaffParameter);
        }
    
        public virtual int RestoreDatabase(string path)
        {
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestoreDatabase", pathParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<StaffVolatility_Result> StaffVolatility(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StaffVolatility_Result>("StaffVolatility", yearParameter);
        }
    
        public virtual ObjectResult<TotalStaffByDepartment_Result> TotalStaffByDepartment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TotalStaffByDepartment_Result>("TotalStaffByDepartment");
        }
    }
}
